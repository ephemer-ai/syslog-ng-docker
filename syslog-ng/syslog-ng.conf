#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#
# Example usage:
# docker run -v ~/syslog-ng/syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf  --privileged -p 514:514 -p 601:601 --name syslog-ng 9c7d41ceab15
# Note that it includes

@version: 3.29
@include "scl.conf"

source s_local {
	internal();
};

source s_network {
	default-network-drivers(
		# NOTE: TLS support
		#
		# the default-network-drivers() source driver opens the TLS
		# enabled ports as well, however without an actual key/cert
		# pair they will not operate and syslog-ng would display a
		# warning at startup.
		# See: https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.26/mutual-authentication-using-tls/2#TOPIC-1430890
		# The paths here are inside the docker container, and do not reference the local filesystem
; 		# What this means is that your Dockerfile must copy these files to this location!
		tls(
		    key-file("/etc/syslog-ng/clientkey.pem")
		    cert-file("/etc/syslog-ng/clientreq.pem")
		    ca-dir("/etc/syslog-ng/")
        )
	);
};

destination d_local {
	file("/var/log/messages");
	file("/var/log/messages-kv.log" template("$ISODATE $HOST $(format-welf --scope all-nv-pairs)\n") frac-digits(3));
};

log {
	source(s_local);
	source(s_network);
	destination(d_local);
};
